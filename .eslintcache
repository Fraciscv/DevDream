[{"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/index.js":"1","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/App.js":"2","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/serviceWorker.js":"3","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/SignUp.js":"4","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/MainContainer.js":"5","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/NavBar.js":"6","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Login.js":"7","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Profile.js":"8","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/CommentDreamForm.js":"9","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/DreamCard.js":"10","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/CommentDreamButton.js":"11"},{"size":314,"mtime":1608384493015,"results":"12","hashOfConfig":"13"},{"size":8292,"mtime":1608384493008,"results":"14","hashOfConfig":"13"},{"size":5086,"mtime":1608384493016,"results":"15","hashOfConfig":"13"},{"size":2283,"mtime":1608384493015,"results":"16","hashOfConfig":"13"},{"size":617,"mtime":1608384493014,"results":"17","hashOfConfig":"13"},{"size":502,"mtime":1608384493014,"results":"18","hashOfConfig":"13"},{"size":2133,"mtime":1608384493014,"results":"19","hashOfConfig":"13"},{"size":2792,"mtime":1608384493014,"results":"20","hashOfConfig":"13"},{"size":2388,"mtime":1608384493010,"results":"21","hashOfConfig":"13"},{"size":4189,"mtime":1608384493011,"results":"22","hashOfConfig":"13"},{"size":2388,"mtime":1608384493010,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"j14s4f",{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/index.js",[],["51","52"],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/App.js",["53","54","55","56","57","58"],"import React from 'react';\nimport './App.css'\nimport { Grommet, Box, Button, Grid, Text, Heading, Layer, Form, FormField, TextInput } from 'grommet';\n\nimport { grommet } from 'grommet/themes';\nimport MainContainer from './MainContainer';\nimport SignUp from './SignUp'\nimport Login from './Login'\nimport NavBar from './NavBar'\nimport Profile from './Profile'\nimport { Switch, Route, withRouter, Redirect, Link } from 'react-router-dom'\nimport { CloudUpload } from 'grommet-icons';\nimport CommentDreamForm from './Components/Main/RIght/CommentDreamForm';\n\n\nclass App extends React.Component {\n  state = {\n    name: \"\",\n    sidebar: false,\n    setSidebar: true,\n    currentUser: null,\n    showDreamButton: null,\n    posts: [],\n    showForm: false,\n    setShow: false,\n  }\n\n  userName = React.createRef()\n\n  // log user in when component mounts\n  componentDidMount() {\n    this.fetchDreams()\n    this.autologinFetch()\n  }\n\n\n\n  fetchDreams = () => {\n    fetch(\"http://localhost:3000/posts\")\n      .then(r => r.json())\n      .then(postsArray => {\n        this.setState({\n          posts: postsArray\n        })\n      })\n  }\n\n  autologinFetch = () => {\n    fetch(\"http://localhost:3000/autologin\", {\n      credentials: \"include\"\n    })\n      .then(r => {\n        if (r.ok) {\n          return r.json()\n        } else {\n          throw Error(\"Not logged in!\")\n        }\n      })\n      .then(user => {\n        this.handleLogin(user)\n      })\n      .catch((err) => console.error(err))\n  }\n\n  updateUser = newUser => {\n    this.setState({ newUser }, () => {\n      this.props.history.push('/home')\n    })\n  }\n\n  handleLogin = currentUser => {\n    // set current user, then redirect to home page\n    this.setState({ currentUser }, () => {\n      this.props.history.push('/home')\n    })\n  }\n\n  handleName = (e) => {\n    console.log('name change!!')\n    e.preventDefault()\n    this.setState({\n      name: this.userName.current.value\n    });\n    this.props.history.push('/signup')\n  }\n\n\n  handleLogout = () => {\n    fetch(\"http://localhost:3000/logout\", {\n      credentials: \"include\"\n    })\n      .then(r => r.json())\n      .then(() => {\n        this.setState({ currentUser: null }, () => {\n          this.props.history.push('/')\n        })\n      })\n  }\n\n  setSidebar = () => {\n    this.setState(prevState => ({\n      sidebar: !prevState.sidebar,\n      setSidebar: !prevState.setSidebar\n    }))\n  }\n\n  setShow = () => {\n    this.setState(prevState => ({\n      show: !prevState.show,\n      setShow: !prevState\n    }))\n  }\n\n  handleDeleteDream = (justinTimberlake) => {\n    this.setState(prevState => ({\n      posts: prevState.posts.filter((post) => post.id !== justinTimberlake.id)\n    }))\n  }\n\n  handleAddNewDream = (newDream) => {\n    this.setState(prevState => ({\n      posts: [ ...prevState.posts, newDream]\n    }))\n  }\n\n  handleAddNewComment = (newComment) => {\n    const updatedPosts = this.state.posts.map(post => {\n      if (\n        post.id === newComment.post.id){\n          return{\n            ...post,\n            comments: [...post.comments, newComment]\n          }\n        }\n        else{\n          return post\n        }\n    })\n    this.setState(prevState => ({\n      ...prevState,\n      posts: [...updatedPosts]\n      \n    }))\n  }\n\n  render() { console.log(\"from APP:\",this.state.posts)\n    const newcostumetheme = {\n      secondary: {\n\n        color: 'text',\n        padding: {\n          horizontal: '8px',\n          vertical: '4px',\n        }\n      }\n    }\n    return (\n      <Grommet full theme={grommet} >\n        <Grid\n          fill=\"horizontal\"\n\n          rows={['auto', 'flex']}\n          columns={['auto', 'flex']}\n          responsive=\"true\"\n          areas={[\n            { name: 'header', start: [0, 0], end: [1, 0] },\n            { name: 'sidebar', start: [0, 1], end: [0, 1] },\n            { name: 'main', start: [1, 1], end: [1, 1] },\n          ]}\n        >\n          <Box\n            gridArea=\"header\"\n            direction=\"row\"\n            align=\"center\"\n            justify=\"between\"\n            pad={{ horizontal: 'medium', vertical: 'small' }}\n            background=\"dark-1\"\n          >\n            <NavBar />\n            <Button onClick={this.setSidebar}>\n              <Text size=\"large\"><div className='img_logo'></div></Text>\n            </Button>\n            <Text>{this.state.currentUser\n              ? <span>Welcome, {this.state.currentUser.name}\n              </span>\n              : null}</Text>\n              {this.state.currentUser ? <CommentDreamForm\n              user={this.state.currentUser}\n              handleAddNewDream={this.handleAddNewDream}\n\n              /> : null }\n          </Box>\n\n          {this.state.sidebar && (\n            <Box\n              gridArea=\"sidebar\"\n              background=\"dark-1\"\n              width=\"small\"\n              animation={[\n                { type: 'fadeIn', duration: 1000 },\n                { type: 'slideRight', size: 'xlarge', duration: 2000 },\n              ]}\n            >\n              {['Profile', 'Settings', 'Sign-Out'].map(name => {\n                if (name === 'Sign-Out') {\n                  return (\n                    <Button onClick={this.handleLogout} key={name} hoverIndicator>\n                      <Box pad={{ horizontal: 'medium', vertical: 'small' }}>\n                        <Link to={name}><Text>{name}</Text></Link>\n                      </Box>\n                    </Button>\n                  )\n                }\n                else {\n                  return (\n                    <Button key={name} hoverIndicator>\n                      <Box pad={{ horizontal: 'medium', vertical: 'small' }}>\n                        <Link to={name}><Text>{name}</Text></Link>\n                      </Box>\n                    </Button>\n                  )\n                }\n              })}\n            </Box>\n          )}\n          <Box\n            gridArea=\"main\"\n            justify=\"center\"\n            align=\"center\"\n            background=\"dark-2\" >\n            <Switch>\n              <Route path=\"/signup\">\n                <SignUp handleLogin={this.handleLogin} name={this.state.name} />\n              </Route>\n              <Route path=\"/login\">\n                <Login handleLogin={this.handleLogin} />\n              </Route>\n              <Route path=\"/profile\">\n                {this.state.currentUser\n                  ? <Profile\n                    currentUser={this.state.currentUser}\n                    updateUser={this.updateUser} />\n                  : <Redirect to='/' />}\n              </Route>\n              <Route path=\"/home\">\n                {this.state.currentUser\n                  ? <MainContainer\n                    handleDeleteDream={this.handleDeleteDream}\n                    posts={this.state.posts}\n                    comment={this.state.comment}\n                    handleAddNewComment={this.handleAddNewComment}\n                    currentUser={this.state.currentUser} />\n                  : <Redirect to='/' />}\n              </Route>\n              <Route path=\"/\">\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <Heading margin=\"none\" size=\"large\">Dive deep into</Heading>\n                <Heading margin=\"none\" size=\"large\">the mind of</Heading>\n                <Heading margin=\"none\" size=\"large\">\n          <form onSubmit={this.handleName}>\n              <input\n                className=\"landingInput\"\n                id=\"text-input\"\n                placeholder=\"[your name]\"\n                name= \"name\"\n                ref={this.userName}\n              />\n              {/* <Button href=\"/signup\"\n                // typed={this.props.typedName}\n                style={{margin: '0 auto'}}\n                label=\"Sign Up\" onClick={() => { }} secondary /> */}\n          </form>\n        </Heading>\n                <br /><br />\n                <br />\n\n\n\n                <h5>Already a member? <a href=\"/Login\">Sign in.</a></h5>\n\n\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n\n              </Route>\n            </Switch>\n          </Box>\n        </Grid>\n      </Grommet>\n    );\n  }\n};\n\nexport default withRouter(App)\n","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/serviceWorker.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/SignUp.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/MainContainer.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/NavBar.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Login.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Profile.js",[],"/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/CommentDreamForm.js",["59","60"],"import React from 'react'\nimport { Box, Button, Layer, Text, FormField, TextArea, Form } from 'grommet';\nimport { CloudUpload, Close } from 'grommet-icons';\n\nconst CommentDreamForm = ({user, handleAddNewDream}) => {\n  // console.log(\"bet\", props.user.id)\n\n    const [show, setShow] = React.useState();\n    const [comments, setComments] = React.useState('');\n    const [content, setContent] = React.useState('')\n    \n\n    let postToBackend = (event) => {\n    console.log(\"clicked\")\n    // event.preventDefault()\n    fetch(\"http://localhost:3000/posts\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        content: content, \n        user_id: user.id\n      }),\n    })\n      .then((r) => r.json())\n      .then((newDream) => {\n        setShow(false)\n        handleAddNewDream(newDream)\n\n      });\n  };\n    console.log(content)\n//TO DO : NEED TO LINK FORM WITH BACK END AND ALSO PASS USER PROPS.  CHANGE TO CLASS COMPONENT\n    return ( \n      \n        <Box justify=\"center\" align=\"center\" pad=\"large\">\n      \n      <Box\n        border\n        pad=\"xsmall\"\n        align=\"center\"\n        round\n        gap=\"small\"\n        hoverIndicator\n        onClick={() => { \n        }}\n      >\n        \n <CloudUpload\n size=\"medium\"  \n onClick={() => setShow(true)} />\n        {show && (\n          \n          <Layer \n            onEsc={() => setShow(false)}\n            onClickOutside={() => setShow(false)}\n          >\n            <Close color=\"red\"\n size=\"medium\" align=\"end\" onClick={() => setShow(false)} />\n            <Box fill align=\"center\" justify=\"center\">\n        <Box width=\"medium\">\n            <Form onSubmit={postToBackend} >\n            <FormField label=\"New Dream\" name=\"content\">\n              <TextArea\n                name=\"content\"\n                value={content}\n                onChange={event => setContent(event.target.value)}\n              />\n            </FormField>\n            <Box direction=\"row\" justify=\"between\" margin={{ top: 'medium' }}>\n              \n              <Button  type=\"submit\" label=\"post\" primary/>\n            </Box>\n\n            </Form>\n            </Box>\n            </Box>\n          </Layer>\n        )}\n        <Text>Upload Dream</Text>\n      </Box>\n    </Box>\n          \n       \n       \n        \n      \n    );\n  }\nexport default CommentDreamForm","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/DreamCard.js",["61","62","63"],"import React from 'react';\nimport './favorite.scss'\n\n\nimport { Cloud, Down } from 'grommet-icons';\nimport {\n    Box,\n    Card,\n    CardBody,\n    CardFooter,\n    Grid,\n    Grommet,\n    Text,\n    Button,\n} from 'grommet';\nimport CommentDreamButton from './CommentDreamButton'\n\n\nconst theme = {\n    themeMode: 'dark',\n    global: {\n        font: {\n            family: `-apple-system,\n           BlinkMacSystemFont, \n           \"Segoe UI\"`,\n        },\n    },\n    card: {\n        \n        container: {\n            pad: { horizontal: 'medium', vertical: 'medium' },\n            justify: \"center\",\n           \n            background: '#FFFFFF12',\n            elevation: 'none',\n            background: \"linear-gradient(102.77deg, #865ED6 -9.18%, #18BAB9 209.09%)\"\n        },\n        footer: {\n            pad: { horizontal: 'medium', vertical: 'small' },\n            background: '#FFFFFF06',\n        },\n    },\n};\n\n\n\n\n\n\n\n\nconst Identifier = ({ children, title, subTitle, ...rest }) => (\n    <Box gap=\"large\" align=\"center\" direction=\"row\" pad=\"small\" {...rest}>\n        {children}\n        <Text weight=\"bold\">\n            @{title}\n        </Text>\n        <Text >{subTitle}</Text>\n    </Box>\n\n);\n\n\nexport class DreamCard extends React.Component {\n\n    state = {\n        hideComments: false,\n        setComments: true,\n    }\n\n    mapComments() {\n        console.log(\"what is this:\", this.props.dream)\n        return this.props.dream.comments.map((comment) => (\n            <CardFooter pad={{ horizontal: 'small', vertical: 'small' }}>\n            <Box pad=\"medium\" elevation=\"medium\" gap=\"medium\">\n                \n                <Text key={comment.id} size=\"medium\">{comment.content}</Text>\n            </Box>\n            </CardFooter>\n        ))\n    }\n\n    handleDelete = () => {\n        \n        fetch(`http://localhost:3000/posts/${this.props.dream.id}`, {\n           method: \"DELETE\"\n        })\n        .then(r => r.json())\n        .then(justinTimberlake => {\n            this.props.handleDeleteDream(justinTimberlake)\n        })\n    }\n\n    setComments = () => {\n        this.setState(prevState => ({\n            hideComments: !prevState.hideComments,\n            setComments: !prevState.setComments\n        }))\n    }\n\n    render() {  \n        // console.log(\"dream card \", this.props)\n\n        return (\n\n            <Grommet theme={theme} full>\n\n                <Box\n                    pad=\"small\" height=\"fixed\"\n                    background=\"dark-1\"  >\n                    <Grid >\n                        <Card>\n                            <Cloud size=\"large\" />\n                            <CardBody pad=\"small\">\n                            <div align=\"end\">\n                                <Identifier\n                                    title={this.props.dream.user.name}\n                                    subTitle={this.props.dream.content}\n\n                                >\n                                    <a className=\"button\" onClick={this.handleDelete}><div><span className=\"heart\" ></span></div>  </a>\n\n                                </Identifier>\n\n\n                                \n                                <CommentDreamButton user={this.props.user} handleAddNewComment={this.props.handleAddNewComment} dreamID={this.props.dream.id}  /><Down onClick={this.setComments} size=\"medium\" /> \n                                </div>\n\n\n\n                            </CardBody>\n                            {this.state.hideComments && (\n                                <Box\n                                    animation={[\n                                        { type: 'fadeIn', duration: 600 },\n                                        { type: 'slideDown', size: 'medium', duration: 600 },\n                                    ]}\n                                >\n                                    \n                                        \n                                           {this.mapComments()}\n                                    \n                                    \n                                </Box>)}\n                        </Card>\n\n\n                    </Grid>\n                </Box>\n            </Grommet>\n        )\n    }\n}\n\nexport default DreamCard","/Users/franciscoandaur/Development/code/FlatironProjects/DevDream/src/Components/Main/RIght/CommentDreamButton.js",["64"],"import React from 'react'\nimport { Box, Button, Layer, Text, FormField, TextArea, Form } from 'grommet';\nimport { Add, Close } from 'grommet-icons';\n\nconst CommentDreamButton = (props) => {\n  const [show, setShow] = React.useState();\n  const [comments, setComments] = React.useState('');\n  const [comment, setContent] = React.useState('')\n\n  console.log(\"peanut butter jelly\",props.handleAddNewComment)\n\n\n  //TO DO : NEED TO LINK FORM WITH BACK END AND ALSO PASS USER PROPS. \n  let postToBackend = (event) => {\n    console.log(comments)\n    event.preventDefault()\n    fetch(\"http://localhost:3000/comments\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        content: comment,\n        user_id: props.user.id,\n        post_id: props.dreamID,\n      }),\n    })\n      .then((r) => r.json())\n      .then((newPost) => {\n        setShow(false)\n        props.handleAddNewComment(newPost)\n\n      });\n  };\n  return (\n\n    <Box \n    align=\"end\" \n    pad=\"large\">\n\n      <Box\n\n        border\n        pad=\"xsmall\"\n        align=\"center\"\n        round\n        gap=\"small\"\n        hoverIndicator\n        onClick={() => {\n        }}\n      >\n\n        <Add\n          color=\"white\"\n          size=\"small\"\n          onClick={() => setShow(true)} />\n\n        {show && (\n\n          <Layer\n            onEsc={() => setShow(false)}\n            onClickOutside={() => setShow(false)}\n          >\n            <Close color=\"red\"\n              size=\"medium\" align=\"end\" onClick={() => setShow(false)} />\n            <Box fill align=\"center\" justify=\"center\">\n              <Box width=\"medium\">\n                <Form onSubmit={postToBackend}>\n                  <FormField label=\"Comments\" name=\"comments\">\n                    <TextArea\n                      name=\"content\"\n                      value={comment}\n                      onChange={event => setContent(event.target.value)}\n                    />\n                  </FormField>\n                  <Box direction=\"row\" justify=\"between\" margin={{ top: 'medium' }}>\n\n                    <Button type=\"submit\" label=\"post\" primary />\n                  </Box>\n\n                </Form>\n              </Box>\n            </Box>\n          </Layer>\n        )}\n        <Text>Comment</Text>\n      </Box>\n    </Box>\n\n\n\n\n\n  );\n}\nexport default CommentDreamButton",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":53,"nodeType":"71","messageId":"72","endLine":3,"endColumn":58},{"ruleId":"69","severity":1,"message":"73","line":3,"column":60,"nodeType":"71","messageId":"72","endLine":3,"endColumn":64},{"ruleId":"69","severity":1,"message":"74","line":3,"column":66,"nodeType":"71","messageId":"72","endLine":3,"endColumn":75},{"ruleId":"69","severity":1,"message":"75","line":3,"column":77,"nodeType":"71","messageId":"72","endLine":3,"endColumn":86},{"ruleId":"69","severity":1,"message":"76","line":12,"column":10,"nodeType":"71","messageId":"72","endLine":12,"endColumn":21},{"ruleId":"69","severity":1,"message":"77","line":147,"column":11,"nodeType":"71","messageId":"72","endLine":147,"endColumn":26},{"ruleId":"69","severity":1,"message":"78","line":9,"column":12,"nodeType":"71","messageId":"72","endLine":9,"endColumn":20},{"ruleId":"69","severity":1,"message":"79","line":9,"column":22,"nodeType":"71","messageId":"72","endLine":9,"endColumn":33},{"ruleId":"69","severity":1,"message":"80","line":14,"column":5,"nodeType":"71","messageId":"72","endLine":14,"endColumn":11},{"ruleId":"81","severity":1,"message":"82","line":36,"column":13,"nodeType":"83","messageId":"84","endLine":36,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":121,"column":37,"nodeType":"87","endLine":121,"endColumn":87},{"ruleId":"69","severity":1,"message":"79","line":7,"column":20,"nodeType":"71","messageId":"72","endLine":7,"endColumn":31},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Layer' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormField' is defined but never used.","'TextInput' is defined but never used.","'CloudUpload' is defined but never used.","'newcostumetheme' is assigned a value but never used.","'comments' is assigned a value but never used.","'setComments' is assigned a value but never used.","'Button' is defined but never used.","no-dupe-keys","Duplicate key 'background'.","ObjectExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]